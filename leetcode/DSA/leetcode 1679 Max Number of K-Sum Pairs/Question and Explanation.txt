#leetcode 1679. Max Number of K-Sum Pairs



You are given an integer array nums and an integer k.



In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.



Return the maximum number of operations you can perform on the array.



 



Example 1:



Input: nums = [1,2,3,4], k = 5

Output: 2

Explanation: Starting with nums = [1,2,3,4]:

- Remove numbers 1 and 4, then nums = [2,3]

- Remove numbers 2 and 3, then nums = []

There are no more pairs that sum up to 5, hence a total of 2 operations.

Example 2:



Input: nums = [3,1,3,4,3], k = 6

Output: 1

Explanation: Starting with nums = [3,1,3,4,3]:

- Remove the first two 3's, then nums = [1,4,3]

There are no more pairs that sum up to 6, hence a total of 1 operation.

 



Constraints:



1 <= nums.length <= 105

1 <= nums[i] <= 109

1 <= k <= 109



Solution:



This solution uses a hash table (implemented with the 'needSet' 'defaultdict') to keep track of the count of numbers encountered so far that can form a pair, to sum up to k. It iterates through the list of numbers, checking if a pair can be formed with each number. 

If a pair is found, it increments the result and updates the count in the hash table. Finally, it returns the total count of pairs found.



Here's a breakdown of how the code works:



1. The 'needSet' variable is initialized as a 'defaultdict' with a default value of 0. A 'defaultdict' is a dictionary that automatically assigns a default value to a key that hasn't been encountered before when accessing it.



2. The res variable is initialized as 0, which will store the final result.



3. The code iterates over each number n in the 'nums' list.



4. If n exists in 'needSet' (i.e., 'needSet[n]' is non-zero), it means we have already encountered a number that can form a pair with n, to sum up to k. In this case, we increment the result res by 1, indicating that we have found a pair. We also decrement 'needSet[n]' by 1 to indicate that we have used one of the pairs for the current number n.



5. If n is not in 'needSet', it means we haven't encountered a number that can form a pair with n, to sum up to k. In this case, we add (k - n) to 'needSet' with a count of 1 to indicate that we are looking for a number (k - n) to form a pair with n.



6. After iterating over all the numbers in 'nums', we have counted the maximum number of pairs that sum up to k, and the result is stored in res. We return res as the final output.


