77. Combinations
Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.

Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.
 

Constraints:

1 <= n <= 20
1 <= k <= n

Solution with backtracking algorithm and decision tree:



1. An empty result list is initialized.



2. A function to perform recursive backtracking is declared. Its inputs are the starting value and the current combinations of decision tree.



3. If the number of current combination is equal to the input "k" then a copy of all the combinations is appended to the result and the code exits the function.



4. Otherwise, the function generates all the possible combinations by iterating through the values from the the start value to the nth value(an input value).



5. For each number 'i' in the input range of the iteration, the number is appended to the current combinations and recursively calls the backtracking function with 'i+1'as the new starting value.



6. After the recursion returns, it removes the last element from the current combination list using the pop() function, so that it can try the next number in the loop. 



7. After defining backtrack, the function is called with starting value as 1 and current combinations as an empty list.



8. The result list is returned once the recursive function is done generating all the possible combinations.