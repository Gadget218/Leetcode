2300. Successful Pairs of Spells and Potions

You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.

You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.

Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.

Example 1:

Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.

Example 2:

Input: spells = [3,1,2], potions = [8,5,8], success = 16
Output: [2,0,2]
Explanation:
- 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.
- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. 
- 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. 
Thus, [2,0,2] is returned.

Trivial Approach: Iterate through both the spell and potions lists and check the number of successful pairs. The time complexity of this would be O(n*m).



Binary Search approach: 

1. Sort the potions' array/list in ascending order.

2. Initialize an empty list called 'res' to store the number of successful pairs for each spell.

3. Initialize a for loop to iterate through each spell in the spells list.

4. Initialize the left and right pointers, they will point at the beginning and end of the potions list.

5. Initialize a variable called 'index' with a value equal to the length of the potions list.

6. Initiate a while loop, and calculate the mid-point value by taking the average of the two pointers.

7. Check whether the product of the spell's element and potions' mid-point element is equal to or greater than the input "success".

8. If the condition at step 7 is satisfied then decrement the right pointer by 1 and update the 'index' to the value of the mid-point.

9. If the condition at step 7 is not satisfied then increment the value of the left pointer by 1.

10. The while loop ends when the left pointer is greater than the right pointer. Append the number of successful pairs to the 'res' array/list.

11. Steps 4 to 10 are repeated for all the elements of the spell list.

12. The 'res' array/list returns the number of successful pairs of each spell.



The overall time complexity of this approach is O((n+m)logm).