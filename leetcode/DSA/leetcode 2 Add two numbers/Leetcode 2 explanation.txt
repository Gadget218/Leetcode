#leetcode 2: Add Two Numbers



You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.



You may assume the two numbers do not contain any leading zero, except the number 0 itself.



Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]

Output: [7,0,8]

Explanation: 342 + 465 = 807.





 Solution explained:

1. A dummy node and a carry node are implemented. A carry variable is initialized to zero.



2. A while loop is initialized, the loop will continue till list1 and list2 are empty and carry is zero.



3. Inside the loop it is checked whether the values at the nodes of list1 and list2 exist. If yes, their values along with carry are added.



4. A new carry value and a new digit value is calculated. 



5. A new node is created with the new digit value and is set as the next node of the current node.



6. The current node and nodes of list1 and list2 are updated.



7. After the loop ends the next node of the dummy is returned, which represents the head of the new linked list.



Time complexity is O(max(n,m)), where n and m are the lengths of the two input lists. 

Space complexity is O(max(n,m)) as well since this method created a new node that contains at most 'Max(n,m)+1' nodes. 

#dsa #pythonprogramming 