class Solution:
    def sumSubarrayMins(self, arr: List[int]) -> int:
        MOD = 10**9+7
        res=0
        stack=[]#(index, num)

        for i, n in enumerate(arr):
            while stack and n<stack[-1][1]:
                j, m = stack.pop()
                left = j-stack[-1][0] if stack else j+1
                right=i-j
                res=(res+m*left*right)%MOD
            stack.append((i,n))

        for i in range(len(stack)):
            j,n=stack[i]
            left=j-stack[i-1][0] if i>0 else j+1
            right = len(arr)-j
            res = (res+n*left*right)%MOD
        return res

Time Complexity:
The main loop goes through each element in the input array once. Inside the loop, there is a while loop that pops elements from the stack until the current element is greater than or equal to the element at the top of the stack. In the worst case, each element can be pushed and popped from the stack only once. Therefore, the time complexity is O(N), where N is the length of the input array.

Space Complexity:
The space complexity is determined by the space used by the stack. In the worst case, the stack can have at most N elements (when the input array is in non-decreasing order). Each element in the stack is a tuple of two integers. Therefore, the space complexity is O(N) in the worst case.

In conclusion:

Time Complexity: O(N)
Space Complexity: O(N)