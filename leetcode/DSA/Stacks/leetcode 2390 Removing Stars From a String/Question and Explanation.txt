You are given a string s, which contains stars *.

In one operation, you can:

Choose a star in s.
Remove the closest non-star character to its left, as well as remove the star itself.
Return the string after all stars have been removed.

Note:

The input will be generated such that the operation is always possible.
It can be shown that the resulting string will always be unique.
2390. Removing Stars From a String
 
Example 1:

Input: s = "leet**cod*e"
Output: "lecoe"
Explanation: Performing the removals from left to right:
- The closest character to the 1st star is 't' in "leet**cod*e". s becomes "lee*cod*e".
- The closest character to the 2nd star is 'e' in "lee*cod*e". s becomes "lecod*e".
- The closest character to the 3rd star is 'd' in "lecod*e". s becomes "lecoe".
There are no more stars, so we return "lecoe".
Example 2:

Input: s = "erase*****"
Output: ""
Explanation: The entire string is removed, so we return an empty string.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters and stars *.
The operation above can be performed on s.

Solution:
1. Initialize an empty list called res to store the modified characters of the string.

2. Iterate over each character i in the input string s.

3. If the character i is not an asterisk (i!='*'), append it to the res list.

4. If the character i is an asterisk (i == '*'), check if the res list is not empty (if res). If it is not empty, remove the last character from the res list using the pop() method. This effectively removes the last non-asterisk character encountered.

5. After iterating through all the characters in s, join the characters in the res list together to form a string using the ''.join(res) function.

6. Return the modified string.