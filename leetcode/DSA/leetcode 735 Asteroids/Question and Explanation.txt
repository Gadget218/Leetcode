We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

 
735. Asteroid Collision

Example 1:

Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.
Example 2:

Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.
Example 3:

Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.
 

Constraints:

2 <= asteroids.length <= 104
-1000 <= asteroids[i] <= 1000
asteroids[i] != 0

Solution:

1. Create an empty stack called stk to store the asteroids that have not collided yet.

2. Iterate through each asteroid in the asteroids list.

3. Inside the loop, there is a while loop that continues as long as the stack is not empty (stk) and the current asteroid (a) is negative (a < 0) and the top element of the stack (stk[-1]) is positive (stk[-1] > 0). This condition represents a potential collision between the current asteroid and the top asteroid in the stack.

4. Within the while loop, three scenarios can occur:
	a. If the sum of the current asteroid and the top asteroid in the stack (a + stk[-1]) is negative (diff < 0), it means the current asteroid destroys the top asteroid in the stack (stk.pop()).
	b. If the sum of the current asteroid and the top asteroid in the stack is zero (diff == 0), it means both asteroids are destroyed, so both the current asteroid and the top asteroid in the stack are removed (stk.pop()).
	c. If the sum of the current asteroid and the top asteroid in the stack is positive (diff > 0), it means the current asteroid is destroyed, and the top asteroid in the stack remains. Therefore, we set the current asteroid to 0 (a = 0).

5. After the while loop ends, we check if the current asteroid (a) is non-zero. If it is, it means the current asteroid has survived the collisions and should be added to the stack (stk.append(a)).

6. Finally, we return the stack (stk), which contains the asteroids that have survived the collisions.

The time complexity of this solution is O(n), where n is the number of asteroids in the input list. We iterate through each asteroid in the list once and perform constant-time operations for each asteroid.

The space complexity is O(n), as the stack (stk) can potentially store all the asteroids if none of them collide.