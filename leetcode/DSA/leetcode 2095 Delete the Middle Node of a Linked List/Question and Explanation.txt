2095. Delete the Middle Node of a Linked List

You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.

For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.
 

Example 1:

Linked list: 1 -> 3 -> 4 -> 7 -> 1 -> 2 -> 6
Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]
Explanation:
The above figure represents the given linked list. The indices of the nodes are written below.
Since n = 7, node 3 with value 7 is the middle node, which is marked in red.
We return the new list after removing this node. 
Example 2:


Input: head = [1,2,3,4]
Output: [1,2,4]
Explanation:
The above figure represents the given linked list.
For n = 4, node 2 with value 3 is the middle node, which is marked in red.
Example 3:


Input: head = [2,1]
Output: [2]
Explanation:
The above figure represents the given linked list.
For n = 2, node 1 with value 1 is the middle node, which is marked in red.
Node 0 with value 2 is the only node remaining after removing node 1.
 

Constraints:

The number of nodes in the list is in the range [1, 105].
1 <= Node.val <= 105

Solution:
We'll Floyd's Tortoise and Hare algorithm (slow and fast pointer). We'll use three pointer middle, slow, and fast. middle pointer equals to slow pointer and they move one step at a time while fast pointer takes two steps.
In case of an even sized linked list, the fast pointer reaches out of bound first i.e. NULL value. When that happens the mid pointer node points to two steps ahead hence removing the middle node.
In case of an odd sized linked list, the fast pointer reaches final value of the linked list. When that happens the mid pointer node points to two steps ahead hence removing the middle node.

Here's a step-by-step explanation of the solution:

1. The deleteMiddle function takes the head of the linked list as input and returns the modified head after deleting the middle node.

2. The first condition checks if the linked list contains only one node. In such a case, since there is no middle node to delete, the function returns None indicating an empty list.

3. If the linked list has more than one node, the function proceeds to find the middle node for deletion.

4. Three pointers, mid, slow, and fast, are initialized to the head of the linked list.

5. A while loop is used to advance the slow pointer by one node and the fast pointer by two nodes in each iteration until fast reaches the end of the linked list.

6. Inside the loop, the mid pointer is updated to the previous node of the slow pointer. This is done to keep track of the node before the middle node since we need to modify its next pointer to skip the middle node.

7. Once the loop ends, the slow pointer points to the middle node, and the mid pointer points to the node before the middle node.

8. To delete the middle node, the next pointer of the mid node is modified to skip the middle node and directly point to the node after the middle node.

9. Finally, the function returns the head of the modified linked list.