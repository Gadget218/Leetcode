#leetcode  973. K Closest Points to Origin

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).



The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)^2 + (y1 - y2)^2).



You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).



 Example 1:

Input: points = [[1,3],[-2,2]], k = 1

Output: [[-2,2]]

Explanation:

The distance between (1, 3) and the origin is sqrt(10).

The distance between (-2, 2) and the origin is sqrt(8).

Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.

We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].



Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], k = 2

Output: [[3,3],[-2,4]]

Explanation: The answer [[-2,4],[3,3]] would also be accepted.



Straight Forward Approach:

Calculate the distance of each point from the origin and sort the array(Time complexity will be O(n)). Next, iterate through the sorted array k times and return the points as output(time complexity is O(log n). Overall time complexity is O(n*log n).



A (slightly) better approach would be to use the Heap data structure. 



A heap queue is a tree-like data structure where the parent node is always less than or equal to its child nodes. A special type of heap called binary heap exists where each parent node has at most two children.



The approach using heap:

1. Initialize an empty list called "minHeap".

2. Initialize a for loop to iterate through the input array "points". At each iteration, the square of each coordinate (x and y) is taken and added and stored as "dist",i.e. distance(note: there is no need to take square root since it's not necessary to compare the distances of each point from the origin).

3. At the end of each iteration of the loop append each distance along with its corresponding x and y coordinates to "minHeap".

4. The "heapify" function is used to convert the "minHeap" list/array to a heap. The function rearranges the list to form a heap, hence time complexity of this action is O(n).

5. Initialize a result list/array.

6. Initiate a while loop, at each iteration of the loop pop the distance and its corresponding x and y coordinates from the heap and append the x and y coordinates to the result array/list. 

7. Decrement the value of k by 1 at the end of each iteration, the loop will end when the k value reaches 0.

8. Return the result list/array.