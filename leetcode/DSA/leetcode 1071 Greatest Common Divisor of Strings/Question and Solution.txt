For two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).
Leetcode 1071. Greatest Common Divisor of Strings

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

 

Example 1:

Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"
Example 2:

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"
Example 3:

Input: str1 = "LEET", str2 = "CODE"
Output: ""
 

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of English uppercase letters.

Solution Explanation:
1. It initializes two variables len1 and len2 to store the lengths of str1 and str2, respectively.

2. It defines a nested function isDivision that checks if a given length l can divide both str1 and str2. It returns True if l is a valid divisor and False otherwise. The function first checks if the lengths of str1 and str2 are divisible by l using the modulo operator. If not, it immediately returns False. If they are divisible, it calculates the number of repetitions needed for each string to match their original lengths (f1 for str1 and f2 for str2). It then checks if str1[:l]*f1 is equal to str1 and if str1[:l]*f2 is equal to str2. If both conditions are satisfied, it returns True; otherwise, it returns False.

3. The code then enters a for loop that iterates from the minimum of len1 and len2 down to 1 (inclusive) with a step of -1. This loop is used to check all possible lengths starting from the longest possible length down to 1.

4. Inside the loop, it calls the isDivision function passing the current length l as an argument. If isDivision returns True, it means that l is a valid divisor, and the code returns the substring of str1 up to length l using str1[:l].

5. If no valid divisor is found in the for loop, the code returns an empty string "" indicating that there is no common divisor for str1 and str2.