872. Leaf-Similar Trees

Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.



For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Example 1:


Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true
Example 2:


Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false
 

Constraints:

The number of nodes in each tree will be in the range [1, 200].
Both of the given trees will have values in the range [0, 200].

Solution:
If the root parameter is not None, it means there is a valid tree node.
If the current node has no left child (root.left) and no right child (root.right), it is a leaf node. In this case, the function returns a list containing the value of the current leaf node ([root.val]).
If the current node is not a leaf node, the function recursively calls get_leaves on its left and right subtrees and concatenates the results.
If the root parameter is None, it means the current subtree is empty, so the function returns an empty list ([]).
Returning to the leafSimilar method, it compares the leaf sequences obtained from both root1 and root2 by invoking the get_leaves function for each root. If the two sequences are identical, the method returns True; otherwise, it returns False.

Both time and space complexity are O(N1+N2).