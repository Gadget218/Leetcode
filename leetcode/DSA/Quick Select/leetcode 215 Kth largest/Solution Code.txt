class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        #quick select: T:O(n) average, worst case O(n^2)
        k=len(nums)-k
        def quickSelect(l,r):
            pivot, p = nums[r], l
            for i in range(l,r):
                if nums[i]<=pivot:
                    nums[p], nums[i] = nums[i], nums[p]
                    p+=1
            nums[p], nums[r] = nums[r], nums[p]
            if p>k: return quickSelect(l,p-1) 
            elif p<k: return quickSelect(p+1,r)
            else: return nums[p]
        return quickSelect(0,len(nums)-1)
        
        # Normal Sorting:T: O(nlogn)
        # nums.sort()
        # return nums[len(nums)-k]
        
Explanation of quick select: Partitioning of the array recursively at one side of the array. kinda like quick sort but quick sort partitioning is done on both sides recursively.