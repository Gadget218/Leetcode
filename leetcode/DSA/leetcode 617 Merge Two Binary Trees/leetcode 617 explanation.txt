617. Merge Two Binary Trees
You are given two binary trees root1 and root2.

Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.

Return the merged tree.

Note: The merging process must start from the root nodes of both trees.

 

Example 1:


Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
Output: [3,4,5,5,4,null,7]
Example 2:

Input: root1 = [1], root2 = [1,2]
Output: [2,2]
 

Constraints:

The number of nodes in both trees is in the range [0, 2000].
-104 <= Node.val <= 104

Solution Explaination:
The solution uses recursion to merge the binary trees. It starts by checking if both trees are empty, in which case it returns None. 
Otherwise, it creates a new node with the sum of the values of the nodes in both trees (if a tree is empty, it takes the value as 0).

Then, it recursively merges the left and right subtrees of both trees by passing the left and right subtrees of the current node to the recursive function.
The function returns the root node of the merged tree.

Overall, the time complexity of this solution is O(n), where n is the number of nodes in the larger tree, since it visits each node at most once.
The space complexity is also O(n), since the recursion stack can go as deep as the height of the tree, which is at most n.