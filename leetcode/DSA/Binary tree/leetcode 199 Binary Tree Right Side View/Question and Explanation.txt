199. Binary Tree Right Side View

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:


Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]
Example 2:

Input: root = [1,null,3]
Output: [1,3]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

Solution:
1. The function rightSideView takes a root node as input, which represents the root of the binary tree. The goal is to find the right side view of this tree.

2. Initialize an empty list res to store the rightmost node values.

3. Create a deque (double-ended queue) called q and enqueue the root node.

4. Enter a while loop that continues until the deque q is empty.

5. Inside the loop, initialize a variable rightside to None. This variable will store the rightmost node at each level.

6. Get the length of the deque q using qlen = len(q). This will give us the number of nodes at the current level.

7. Iterate i over the range of qlen. This loop processes all the nodes at the current level.

8. Within the loop, dequeue a node from the left side of q using node = q.popleft().

9. Check if the node is not None. If it's not None, update rightside to node because it represents the rightmost node at the current level.

10. Enqueue the left and right child nodes of the current node (if they exist) into the q deque.

11. After processing all the nodes at the current level, check if rightside is not None. If it's not None, append the value of rightside to the res list. This ensures that only the rightmost nodes at each level are added to the result.

12. Repeat steps 6 to 11 for all the levels of the binary tree.

13. Finally, return the res list containing the right side view of the binary tree.

Time Complexity: The code visits each node of the binary tree once, so the time complexity is O(n), where n is the number of nodes in the tree.

Space Complexity: At any given time, the deque q can store a maximum of the nodes present at the widest level of the tree. In the worst case, the widest level can contain n/2 nodes (in a complete binary tree). Therefore, the space complexity is O(n), where n is the number of nodes in the tree.
