leetcode 1934. Confirmation Rate

Table: Signups

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
+----------------+----------+
user_id is the primary key for this table.
Each row contains information about the signup time for the user with ID user_id.
 

Table: Confirmations

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
| action         | ENUM     |
+----------------+----------+
(user_id, time_stamp) is the primary key for this table.
user_id is a foreign key with a reference to the Signups table.
action is an ENUM of the type ('confirmed', 'timeout')
Each row of this table indicates that the user with ID user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout').
 

The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.

Write an SQL query to find the confirmation rate of each user.

Return the result table in any order.

The query result format is in the following example.

 

Example 1:

Input: 
Signups table:
+---------+---------------------+
| user_id | time_stamp          |
+---------+---------------------+
| 3       | 2020-03-21 10:16:13 |
| 7       | 2020-01-04 13:57:59 |
| 2       | 2020-07-29 23:09:44 |
| 6       | 2020-12-09 10:39:37 |
+---------+---------------------+
Confirmations table:
+---------+---------------------+-----------+
| user_id | time_stamp          | action    |
+---------+---------------------+-----------+
| 3       | 2021-01-06 03:30:46 | timeout   |
| 3       | 2021-07-14 14:00:00 | timeout   |
| 7       | 2021-06-12 11:57:29 | confirmed |
| 7       | 2021-06-13 12:58:28 | confirmed |
| 7       | 2021-06-14 13:59:27 | confirmed |
| 2       | 2021-01-22 00:00:00 | confirmed |
| 2       | 2021-02-28 23:59:59 | timeout   |
+---------+---------------------+-----------+
Output: 
+---------+-------------------+
| user_id | confirmation_rate |
+---------+-------------------+
| 6       | 0.00              |
| 3       | 0.00              |
| 7       | 1.00              |
| 2       | 0.50              |
+---------+-------------------+
Explanation: 
User 6 did not request any confirmation messages. The confirmation rate is 0.
User 3 made 2 requests and both timed out. The confirmation rate is 0.
User 7 made 3 requests and all were confirmed. The confirmation rate is 1.
User 2 made 2 requests where one was confirmed and the other timed out. The confirmation rate is 1 / 2 = 0.5.

Solution:
#MySQL query:

WITH rate_cte AS
  (SELECT user_id,
          ROUND(SUM(CASE
                        WHEN action='confirmed' THEN 1
                        ELSE 0
                    END) / COUNT(*), 2) AS confirmation_rate
   FROM Confirmations
   GROUP BY user_id
   ORDER BY NULL)

SELECT s.user_id,
       IFNULL(r.confirmation_rate, 0) AS confirmation_rate
FROM Signups s
LEFT JOIN rate_cte r ON s.user_id = r.user_id;

Explanation:

1. The CTE rate_cte calculates the confirmation rate for each user by performing the following steps:

	It selects the user_id column.
	It uses a CASE statement to check if the action is 'confirmed'. If it is, it assigns a value of 1; otherwise, it assigns a value of 0.
	It sums up the values obtained from the CASE statement for each user, representing the count of confirmed messages.
	It divides the sum of confirmed messages by the total count of messages for each user using the COUNT(*) function.
	It rounds the result to two decimal places using the ROUND function.
	It groups the results by the user_id column.
	It orders the results by NULL (no specific order is required).

2. The main query then selects the user_id column from the Signups table.

3. It performs a left join between the Signups table and the CTE rate_cte based on the user_id column.

4. The IFNULL function is used to handle the case where a user did not request any confirmation messages. If the confirmation rate is NULL (no corresponding entry in the CTE), it replaces it with 0.

5. The query returns the user_id and the corresponding confirmation rate for each user.


--OR--

SELECT s.user_id, ROUND(SUM(CASE WHEN c.action='confirmed' THEN 1 ELSE 0 END)/COUNT(*),2) AS confirmation_rate
FROM Signups s LEFT JOIN Confirmations c ON s.user_id=c.user_id
GROUP BY s.user_id;

--OR--

SELECT s.user_id, ROUND(COUNT(CASE WHEN c.action='confirmed' THEN 1 ELSE NULL END)/COUNT(*),2) AS confirmation_rate
FROM Signups s LEFT JOIN Confirmations c ON s.user_id=c.user_id
GROUP BY s.user_id;
